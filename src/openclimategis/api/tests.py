from django.test import TestCase
from django.test.client import Client
from climatedata.models import NetcdfDataset
import unittest
import itertools
import pdb
from util.helpers import reverse_wkt, get_temp_path


#def disabled(f):
#    warn('{0} TEST DISABLED!'.format(f.__name__))

#class TestViews(TestCase):
#    
#    fixtures = ['test_usgs-cida-maurer.json']
#    
#    def test_get_choices(self):
#        choices = get_choices(Archive)
#        self.assertEqual(len(choices),2)
#        
#        choices = get_choices(SimulationOutput,'pk','run',True)
#        self.assertEqual(len(choices),3)
    

class TestUrls(TestCase):
    """Test URLs for correct response codes."""
    
#    fixtures = ['luca_fixtures.json']
    fixtures = ['test_usgs-cida-maurer.json']
    
    def setUp(self):
        self.client = Client()
    
    def test_fixture_loading(self):
        '''Check that the test fixture loaded correctly'''
        self.assertEqual(NetcdfDataset.objects.count(), 1)
    
    def test_api_html(self):
        '''Creates an HTML representation of the API main page'''
        response = self.client.get('/api/')
        if response.status_code != 200:
                print response.content
        self.assertEqual(response.status_code, 200)
        
    def test_multipolygon_url(self):
        url = '/api/archive/usgs-cida-maurer/model/miroc3.2(medres)/scenario/sres-a1b/run/2/temporal/2000-01-01+2000-03-01/spatial/intersects+multipolygon(((-101.4073932908307825+40.0010033647185850,+-102.0515352914306817+39.9989183647166371,+-102.0475452914269709+40.3426443650367617,+-102.0476202914270374+40.4310773651191226,+-102.0460312914255638+40.6973193653670791,+-102.0469922914264487+40.7431303654097405,+-102.0477392914271491+40.9980713656471707,+-102.6212572919612853+41.0002143656491711,+-102.6522712919901608+40.9981243656472216,+-103.3829562926706700+41.0003163656492617,+-103.5723162928470202+40.9996483656486390,+-104.0517052932934945+41.0032113656519641,+-104.0540122932956422+41.3880853660104009,+-104.0555002932970154+41.5642223661744410,+-104.0536152932952660+41.6982183662992298,+-104.0535132932951683+41.9998153665801226,+-104.0562192932976870+42.6146693671527430,+-104.0561992932976665+43.0030623675144668,+-103.5014642927810371+42.9986183675103320,+-103.0058752923194874+42.9993543675110175,+-102.7883842921169304+42.9953033675072405,+-102.0867012914634415+42.9898873675021918,+-101.2317372906671835+42.9868433674993611,+-100.1981422897045775+42.9910953675033198,+-99.5327902890849145+42.9923353675044737,+-99.2539712888252552+42.9923893675045292,+-98.4976512881208777+42.9917783675039544,+-98.4574442880834226+42.9371603674530888,+-98.3912042880217399+42.9201353674372328,+-98.3103392879464195+42.8817943674015254,+-98.1678262878136962+42.8395713673622041,+-98.1448692877923179+42.8357943673586874,+-98.1231172877720610+42.8202233673441839,+-98.1218202877708450+42.8083603673331368,+-98.0331402876882549+42.7691923672966539,+-97.9951442876528773+42.7668123672944418,+-97.9635582876234565+42.7736903673008442,+-97.9294772875917232+42.7923243673182014,+-97.8899412875548904+42.8312713673544749,+-97.8886592875537076+42.8558073673773237,+-97.8186432874884986+42.8665873673873676,+-97.7970282874683647+42.8495973673715440,+-97.7721862874452228+42.8461643673683454,+-97.7252502874015221+42.8580083673793695,+-97.6857522873647355+42.8368373673596565,+-97.6349702873174436+42.8612853673824219,+-97.5706542872575397+42.8479903673700449,+-97.5061322871974454+42.8601363673813580,+-97.4831592871760506+42.8571573673785764,+-97.4572632871519318+42.8504433673723284,+-97.3893062870886439+42.8674333673881520,+-97.3114142870161061+42.8617713673828789,+-97.2714572869788867+42.8500143673719265,+-97.2431892869525569+42.8518263673736186,+-97.2244432869350987+42.8412023673637208,+-97.2118312869233563+42.8125733673370590,+-97.1614222868764159+42.7986193673240649,+-97.1304692868475854+42.7739233673010659,+-97.0151392867401796+42.7595423672876649,+-96.9795932867070718+42.7583133672865259,+-96.9700032866981445+42.7520653672807072,+-96.9778692867054701+42.7273083672576490,+-96.9707732866988579+42.7211473672519162,+-96.9082342866406066+42.7316993672617400,+-96.8101402865492560+42.7040843672360211,+-96.8104372865495293+42.6813413672148414,+-96.7993442865391955+42.6700193672042900,+-96.7226582864677766+42.6685923672029617,+-96.6990602864457998+42.6577153671928357,+-96.6945962864416515+42.6411633671774197,+-96.7152732864608993+42.6219073671594870,+-96.7140592864597721+42.6123023671505408,+-96.6366722863876930+42.5507313670931993,+-96.6292942863808264+42.5226933670670917,+-96.6054672863586319+42.5072363670526912,+-96.5847532863393496+42.5182873670629817,+-96.5472152863043931+42.5204993670650424,+-96.4947012862554772+42.4884593670352047,+-96.4393942862039637+42.4892403670359329,+-96.3960742861636248+42.4674013670155972,+-96.3978902861653211+42.4417933669917460,+-96.4176282861836995+42.4147773669665824,+-96.4117612861782334+42.3809183669350489,+-96.4241752861897936+42.3492793669055843,+-96.3897812861577705+42.3287893668864967,+-96.3687002861381359+42.2980233668578478,+-96.3428812861140784+42.2820813668430020,+-96.3326582861045608+42.2603073668227225,+-96.3377082861092617+42.2295223667940505,+-96.3635122861333002+42.2140423667796370,+-96.3521652861227267+42.1681853667369211,+-96.2851232860602977+42.1234523666952612,+-96.2654832860419987+42.0488973666258303,+-96.2387252860170861+42.0284383666067782,+-96.2360932860146363+42.0012583665814674,+-96.2028422859836638+41.9966153665771387,+-96.1852172859672550+41.9806853665622981,+-96.1473282859319625+41.9662543665488670,+-96.1458702859305987+41.9249073665103538,+-96.1599702859437429+41.9041513664910212,+-96.1356232859210564+41.8626203664523473,+-96.0764172858659151+41.7914693663860817,+-96.0993212858872567+41.7529753663502277,+-96.0997712858876696+41.7315633663302918,+-96.0855572858744296+41.7049873663055379,+-96.1222022859085570+41.6949133662961557,+-96.1202642859067566+41.6840943662860823,+-96.0993062858872378+41.6546803662586882,+-96.1113072858984197+41.5990063662068366,+-96.0808352858700374+41.5760003661854114,+-96.0919362858803794+41.5631453661734369,+-96.0858402858746956+41.5375223661495738,+-96.0501722858414837+41.5243353661372936,+-96.0045922857990348+41.5366633661487725,+-95.9939652857891303+41.5281033661408046,+-95.9966882857916630+41.5115173661253607,+-96.0134512858072782+41.4929943661081069,+-96.0068972858011733+41.4819543660978240,+-95.9531852857511467+41.4723873660889097,+-95.9350652857342823+41.4623813660795975,+-95.9400562857389190+41.3948053660166551,+-95.9428952857415709+41.3400773659656906,+-95.8891072856914803+41.3013893659296585,+-95.8975912856993773+41.2868633659161333,+-95.9112022857120508+41.3084693659362543,+-95.9302302857297775+41.3020563659302837,+-95.9109812857118413+41.2252453658587399,+-95.9222502857223418+41.2078543658425502,+-95.9161002857166096+41.1940633658297060,+-95.8591982856636236+41.1805373658171021,+-95.8598012856641759+41.1668653658043695,+-95.8766852856799119+41.1642023658018985,+-95.8582742856627590+41.1091873657506568,+-95.8788042856818805+41.0658713657103149,+-95.8595392856639421+41.0350023656815637,+-95.8608972856652031+41.0026503656514336,+-95.8376032856435103+40.9742583656249906,+-95.8365412856425252+40.9011083655568655,+-95.8343962856405227+40.8703003655281805,+-95.8464352856517365+40.8483323655077157,+-95.8517902856567190+40.7926003654558116,+-95.8766162856798445+40.7304363653979209,+-95.7679992855786821+40.6431173653165985,+-95.7575462855689494+40.6209043652959068,+-95.7674792855782044+40.5890483652662368,+-95.7634122855744181+40.5497073652296010,+-95.7370362855498485+40.5323733652134592,+-95.6920662855079627+40.5241293652057806,+-95.6874132855036379+40.5611703652402724,+-95.6756932854927129+40.5658353652446237,+-95.6629442854808474+40.5587293652380083,+-95.6580602854762958+40.5303323652115566,+-95.6849702855013646+40.5122053651946743,+-95.6953612855110407+40.4853383651696532,+-95.6368172854565159+40.3963903650868161,+-95.6341852854540662+40.3588003650518061,+-95.6162012854373131+40.3464973650403493,+-95.6179332854389230+40.3314183650263018,+-95.6455532854646435+40.3223463650178502,+-95.6468272854658323+40.3091093650055257,+-95.5955322854180594+40.3097763650061438,+-95.5471372853729974+40.2662153649655750,+-95.4768222853075059+40.2268553649289231,+-95.4666362852980228+40.2132553649162503,+-95.4609522852927199+40.1739953648796870,+-95.4224762852568915+40.1317433648403465,+-95.3928132852292663+40.1154163648251370,+-95.3845422852215563+40.0953623648064621,+-95.4037842852394817+40.0803793647925062,+-95.4137642852487744+40.0481113647624483,+-95.3905322852271382+40.0437503647583952,+-95.3712442852091726+40.0287513647444229,+-95.3450672851847969+40.0249743647409062,+-95.3086972851509273+39.9994073647170936,+-95.3297012851704864+39.9925953647107519,+-95.7807002855905125+39.9934893647115786,+-96.0012532857959258+39.9951593647131389,+-96.2405982860188232+39.9945033647125285,+-96.4540382862176102+39.9941723647122132,+-96.8014202865411306+39.9944763647124972,+-96.9082872866406575+39.9961543647140658,+-97.3619122870631344+39.9973803647152053,+-97.8165892874865790+39.9997293647173962,+-97.9295882875918267+39.9984523647162007,+-98.2641652879034240+39.9984343647161893,+-98.5044792881272286+39.9971293647149722,+-98.7206322883285452+39.9984613647162135,+-99.0647472886490164+39.9983383647160977,+-99.1782012887546784+39.9995773647172541,+-99.6278592891734576+40.0029873647204255,+-100.1809102896885264+40.0004783647180915,+-100.1911112896980285+40.0005853647181908,+-100.7350492902046142+39.9991723647168698,+-100.7548562902230600+40.0001983647178321,+-101.3221482907513860+40.0018213647193406,+-101.4073932908307825+40.0010033647185850)),+((-91.1201322812500223+40.7054433653746415,+-91.1293032812585579+40.6821893653529827,+-91.1626442812896158+40.6563523653289209,+-91.2150602813384239+40.6438593653172830,+-91.2622112813823492+40.6395873653133037,+-91.3757622814880932+40.6034803652796796,+-91.4112712815211665+40.5730123652513015,+-91.4130262815228036+40.5480343652280411,+-91.3822552814941389+40.5285383652098830,+-91.3749462814873397+40.5036973651867527,+-91.3855512814972144+40.4472943651342263,+-91.3729082814854365+40.4030323650929972,+-91.3859092814975469+40.3924053650831070,+-91.4189682815283362+40.3869193650779934,+-91.4487472815560665+40.3719463650640478,+-91.4770382815824092+40.3910123650818065,+-91.4903142815947774+40.3908063650816160,+-91.5003772816041447+40.4051603650949858,+-91.5276912816295862+40.4101693650996481,+-91.5296072816313711+40.4350863651228565,+-91.5388462816399766+40.4412883651286279,+-91.5332082816347281+40.4554413651418088,+-91.5793832816777353+40.4637603651495539,+-91.5860282816839231+40.4845193651688930,+-91.6168602817126327+40.5048733651878479,+-91.6225362817179274+40.5329033652139543,+-91.6920812817826913+40.5516773652314342,+-91.6899592817807161+40.5812023652589318,+-91.7169762818058700+40.5934353652703237,+-91.7417112818289127+40.6097843652855488,+-91.9463702820195152+40.6082663652841376,+-92.1931742822493732+40.6000883652765197,+-92.3615132824061504+40.5995763652760431,+-92.6464322826714977+40.5914623652684838,+-92.7178152827379733+40.5896673652668198,+-93.1009382830947914+40.5843473652618627,+-93.3702712833456303+40.5804913652582684,+-93.5629102835250421+40.5808133652585710,+-93.7863032837330906+40.5784483652563637,+-94.0180592839489293+40.5740223652522474,+-94.2383922841541306+40.5709663652494044,+-94.4852312843840139+40.5742053652524177,+-94.6398762845280430+40.5757443652538541,+-94.9206162847895030+40.5772183652552201,+-95.2174282850659210+40.5818923652595771,+-95.3825552852197092+40.5843343652618529,+-95.7674792855782044+40.5890483652662368,+-95.7575462855689494+40.6209043652959068,+-95.7679992855786821+40.6431173653165985,+-95.8766162856798445+40.7304363653979209,+-95.8517902856567190+40.7926003654558116,+-95.8464352856517365+40.8483323655077157,+-95.8343962856405227+40.8703003655281805,+-95.8365412856425252+40.9011083655568655,+-95.8376032856435103+40.9742583656249906,+-95.8608972856652031+41.0026503656514336,+-95.8595392856639421+41.0350023656815637,+-95.8788042856818805+41.0658713657103149,+-95.8582742856627590+41.1091873657506568,+-95.8766852856799119+41.1642023658018985,+-95.8598012856641759+41.1668653658043695,+-95.8591982856636236+41.1805373658171021,+-95.9161002857166096+41.1940633658297060,+-95.9222502857223418+41.2078543658425502,+-95.9109812857118413+41.2252453658587399,+-95.9302302857297775+41.3020563659302837,+-95.9112022857120508+41.3084693659362543,+-95.8975912856993773+41.2868633659161333,+-95.8891072856914803+41.3013893659296585,+-95.9428952857415709+41.3400773659656906,+-95.9400562857389190+41.3948053660166551,+-95.9350652857342823+41.4623813660795975,+-95.9531852857511467+41.4723873660889097,+-96.0068972858011733+41.4819543660978240,+-96.0134512858072782+41.4929943661081069,+-95.9966882857916630+41.5115173661253607,+-95.9939652857891303+41.5281033661408046,+-96.0045922857990348+41.5366633661487725,+-96.0501722858414837+41.5243353661372936,+-96.0858402858746956+41.5375223661495738,+-96.0919362858803794+41.5631453661734369,+-96.0808352858700374+41.5760003661854114,+-96.1113072858984197+41.5990063662068366,+-96.0993062858872378+41.6546803662586882,+-96.1202642859067566+41.6840943662860823,+-96.1222022859085570+41.6949133662961557,+-96.0855572858744296+41.7049873663055379,+-96.0997712858876696+41.7315633663302918,+-96.0993212858872567+41.7529753663502277,+-96.0764172858659151+41.7914693663860817,+-96.1356232859210564+41.8626203664523473,+-96.1599702859437429+41.9041513664910212,+-96.1458702859305987+41.9249073665103538,+-96.1473282859319625+41.9662543665488670,+-96.1852172859672550+41.9806853665622981,+-96.2028422859836638+41.9966153665771387,+-96.2360932860146363+42.0012583665814674,+-96.2387252860170861+42.0284383666067782,+-96.2654832860419987+42.0488973666258303,+-96.2851232860602977+42.1234523666952612,+-96.3521652861227267+42.1681853667369211,+-96.3635122861333002+42.2140423667796370,+-96.3377082861092617+42.2295223667940505,+-96.3326582861045608+42.2603073668227225,+-96.3428812861140784+42.2820813668430020,+-96.3687002861381359+42.2980233668578478,+-96.3897812861577705+42.3287893668864967,+-96.4241752861897936+42.3492793669055843,+-96.4117612861782334+42.3809183669350489,+-96.4176282861836995+42.4147773669665824,+-96.3978902861653211+42.4417933669917460,+-96.3960742861636248+42.4674013670155972,+-96.4393942862039637+42.4892403670359329,+-96.4802432862420147+42.5171303670619096,+-96.4893372862504890+42.5640283671055784,+-96.5009422862612922+42.5738853671147623,+-96.4884982862497083+42.5804803671209058,+-96.5128442862723688+42.6297553671667941,+-96.5411652862987495+42.6624053671972092,+-96.5630392863191247+42.6685133672028911,+-96.6265402863782583+42.7083543672399983,+-96.6407092863914556+42.7486033672774823,+-96.6329802863842673+42.7768353673037751,+-96.6008752863543663+42.7995583673249342,+-96.5876452863420383+42.8353813673583019,+-96.5731262863285167+42.8343473673573385,+-96.5562112863127595+42.8466603673688056,+-96.5375112862953557+42.8969063674155962,+-96.5442632863016428+42.9138663674313960,+-96.5149352862743228+42.9523823674672656,+-96.5171482862763810+42.9864583674989973,+-96.4990202862594941+43.0120503675228321,+-96.5200102862790459+43.0515083675595847,+-96.4795732862413900+43.0618843675692489,+-96.4620942862251098+43.0755823675820011,+-96.4608052862239163+43.0878723675934481,+-96.4515052862152515+43.1263083676292496,+-96.4731142862353721+43.2090823677063369,+-96.4872452862485375+43.2179093677145545,+-96.5586052863150002+43.2254893677216216,+-96.5669912863228035+43.2396333677347897,+-96.5595672863158967+43.2532633677474792,+-96.5707222863262729+43.2636123677571192,+-96.5791312863341034+43.2900743677817701,+-96.5405632862981946+43.3076593677981450,+-96.5228942862817405+43.3569663678440662,+-96.5250532862837503+43.3842253678694476,+-96.5577082863141527+43.4007273678848193,+-96.5891132863434052+43.4355393679172437,+-96.5837962863384547+43.4819203679604414,+-96.5983152863519763+43.4998493679771343,+-96.4604542862235803+43.4997183679770103,+-96.0610392858516065+43.4985333679759094,+-95.8669122856708071+43.4989443679762928,+-95.4647752852962839+43.4995413679768461,+-95.3965582852327572+43.5003343679775867,+-94.9204642847893609+43.4993713679766927,+-94.8598392847328995+43.5000303679773026,+-94.4552382843560849+43.4981023679755054,+-94.2467872841619396+43.4989483679762969,+-93.9739502839078398+43.5002983679775497,+-93.6536992836095834+43.5007623679779840,+-93.5008302834672236+43.5004883679777308,+-93.0543802830514295+43.5014573679786309,+-93.0272112830261335+43.5012783679784647,+-92.5580082825891424+43.5002593679775202,+-92.4531692824915154+43.4994623679767756,+-92.0775322821416751+43.4991533679764899,+-91.7303662818183483+43.4995713679768770,+-91.6110992817072685+43.5006263679778584,+-91.2235662813463506+43.5008083679780242,+-91.2359032813578352+43.4646843679443862,+-91.2109162813345762+43.4240513679065430,+-91.1982432813227746+43.3705133678566810,+-91.1770482813030299+43.3539463678412531,+-91.0784982812112531+43.3132973678033935,+-91.0664282812000039+43.2806833677730225,+-91.0690522812024454+43.2578983677517996,+-91.1613542812884106+43.1475763676490516,+-91.1685712812951294+43.0828883675888079,+-91.1597522812869130+43.0811823675872176,+-91.1522142812798961+43.0013163675128425,+-91.1391212812677054+42.9258933674425975,+-91.0934282812251439+42.8714403673918838,+-91.0820302812145428+42.7833653673098553,+-91.0661682811997650+42.7449133672740444,+-90.9991822811373794+42.7070583672387869,+-90.9194092810630821+42.6806773672142228,+-90.8925452810380676+42.6782403672119557,+-90.7456102809012179+42.6570013671921728,+-90.6947912808538916+42.6379283671744105,+-90.6643802808255685+42.5713913671124402,+-90.6392192808021377+42.5557143670978419,+-90.6257072807895554+42.5285623670725528,+-90.6384562808014209+42.5093633670546751,+-90.6518992808139501+42.4947003670410197,+-90.6484732808107481+42.4756473670232708,+-90.6059552807711555+42.4605643670092263,+-90.5637112807318090+42.4218433669731638,+-90.4911712806642612+42.3887913669423853,+-90.4417252806182006+42.3600833669156458,+-90.4278092806052456+42.3406453668975402,+-90.4181122805962190+42.2639393668261079,+-90.4073012805861396+42.2426613668062885,+-90.3678582805494131+42.2102263667760838,+-90.3237302805083146+42.1973373667640743,+-90.2310632804220063+42.1597413667290652,+-90.1917022803853570+42.1227103666945766,+-90.1762142803709281+42.1205243666925355,+-90.1667762803621429+42.1037673666769336,+-90.1682262803634842+42.0610663666371636,+-90.1506632803471319+42.0334533666114467,+-90.1427962803398088+41.9839893665653818,+-90.1546452803508345+41.9308023665158487,+-90.1959652803893164+41.8061673663997695,+-90.2554382804447073+41.7817693663770484,+-90.3050162804908894+41.7564973663535142,+-90.3261572805105715+41.7227683663221001,+-90.3412622805246457+41.6491223662535077,+-90.3394762805229732+41.6028313662103955,+-90.3484942805313835+41.5868823661955460,+-90.4231352806008886+41.5673053661773082,+-90.4350982806120385+41.5436123661552443,+-90.4551262806306795+41.5275793661403156,+-90.5409752807106400+41.5260033661388519,+-90.6008382807663963+41.5096183661235898,+-90.6589292808204874+41.4623503660795620,+-90.7083542808665300+41.4500933660681454,+-90.7800422809332872+41.4498523660679297,+-90.8442842809931221+41.4446523660630817,+-90.9498002810913846+41.4212633660413019,+-91.0008422811389295+41.4311123660504705,+-91.0276372811638765+41.4235363660434217,+-91.0559352811902301+41.4014073660228092,+-91.0734292812065291+41.3349253659608920,+-91.1024962812335986+41.2678483658984163,+-91.1016722812328226+41.2315523658646157,+-91.0564662811907226+41.1762903658131521,+-91.0184022811552751+41.1658573658034328,+-90.9904852811292812+41.1444043657834584,+-90.9579302810989532+41.1043933657461906,+-90.9547942810960421+41.0703973657145269,+-90.9608512811016823+40.9505413656029020,+-90.9834192811226927+40.9239653655781552,+-91.0493532811840964+40.8796233655368582,+-91.0890502812210769+40.8337673654941540,+-91.0928952812246564+40.7615873654269336,+-91.1201322812500223+40.7054433653746415)))/aggregate/true/variable/pr.shz'
        response = self.client.get(url)
        self.assertEqual(response.status_code,200)
        
    def test_triangle_url(self):
        ext = 'kml'
        sop = 'intersects'
        agg = 'false'
        url = '/api/archive/usgs-cida-maurer/model/miroc3.2(medres)/scenario/sres-a1b/run/2/temporal/2000-01-01+2000-03-01/spatial/{1}+polygon((-94+39.75,-93.75+39.75,-93.75+40,-94+39.75))/aggregate/{2}/variable/pr.{0}'.format(ext,sop,agg)
        response = self.client.get(url)
        with open(get_temp_path(suffix='.'+ext),'w') as f:
            f.write(response.content)
        self.assertEqual(response.status_code,200)

    def test_api_urls(self):
        '''tests a combination of resources and formats'''
        resources = [
            '/api/archives',
            '/api/archives/usgs-cida-maurer',
            '/api/scenarios',
            '/api/scenarios/sres-a1b',
            '/api/models',
            '/api/models/echam5-mpi-om',
            '/api/variables',
            '/api/variables/pr',
            '/api/simulations',
            '/api/simulations/1',
            '/api/aois',
        ]
        suffixes = [
            '',
            '/',
            '.html',
            '.json',
            #'.kml',
        ]
        for resource in resources:
            for suffix in suffixes:
                print 'testing: {0}{1}'.format(resource,suffix)
                response = self.client.get('{0}{1}'.format(resource,suffix))
                if response.status_code != 200:
                    print response.content
                self.assertEqual(response.status_code, 200)


    def test_simulations_with_query_string_filter(self):
        '''Test that a query string filter reduces # of records returned.'''
        resource = '/api/simulations'
        filter1 = '?variable=pr&variable=tas'
        filter2 = '?variable=tas'
        filter3 = '?variable=pr&variable=tas&model=ccsm3'
        filter4 = '?variable=pr&model=ccsm3'
        content_filter1 = self.client.get(resource + filter1).content
        content_filter2 = self.client.get(resource + filter2).content
        content_filter3 = self.client.get(resource + filter3).content
        content_filter4 = self.client.get(resource + filter4).content
        content_unfiltered = self.client.get(resource).content
        
        # filter 1 should not affect the results
        self.assertTrue(len(content_unfiltered) == len(content_filter1))
        # filter 2 should return one record
        self.assertTrue(len(content_unfiltered) > len(content_filter2))
        # filter 3 should return the same records as filter 2
        self.assertTrue(len(content_filter2) == len(content_filter3))
        # filter 4 should not return any records
        self.assertTrue(len(content_filter3) > len(content_filter4))
    
    def test_data_request_urls(self):
        '''tests that data request URLs work
        
        This tests many different combinations of:
        * output formats (CSV, Shapefile, GeoJSON)
        * spatial operations (intersects or clip)
        * aggregation
        '''
        exts = [
            'csv',
            'kcsv',
            'shz',
            'lshz',
            'geojson',
        ]
        drange = '2010-3-1+2010-4-30'
        polygon = '-96.25+38.7,-95.78+38.1,-95.9+39.1,-96.23+39.8,-96.25+38.7'
        sops = [
            'intersects',
            'clip',
        ]
        aggs = [
            'true',
            'false',
        ]
        cm = 'miroc3.2(medres)'
        scenario = 'sres-a1b'
        archive = 'usgs-cida-maurer'
        var = 'pr'
        run = 2
        
        for ext,sop,agg in itertools.product(exts,sops,aggs):
            
            print(ext,sop,agg)
        
            base_url = ('/api'
                        '/archive/{archive}/model'
                        '/{cm}/scenario/{scenario}'
                        '/run/{run}'
                        '/temporal/{drange}'
                        '/spatial/{sop}+polygon(({polygon}))'
                        '/aggregate/{agg}'
                        '/variable/{variable}.{ext}')
            
            url = base_url.format(ext=ext,
                                  drange=drange,
                                  polygon=polygon,
                                  sop=sop,
                                  agg=agg,
                                  cm=cm,
                                  scenario=scenario,
                                  archive=archive,
                                  variable=var,
                                  run=run)

            response = self.client.get(url)
#            if response.status_code != 200:
#                print response.content
            self.assertEqual(response.status_code, 200)
    
    def test_simple_json_data_request(self):
        '''tests that a simple data request URLs works'''
    
        url = ('/api'
               '/archive/{archive}'
               '/model/{cm}'
               '/scenario/{scenario}'
               '/run/{run}'
               '/temporal/{drange}'
               '/spatial/{sop}+polygon(({polygon}))'
               '/aggregate/{agg}'
               '/variable/{variable}.{ext}'
               ).format(ext='json',
                        drange='2000-01-01+2000-02-01',
                        polygon='-104+39.75,-103.75+39.75,-103.75+40,-104+39.75',
                        sop='intersects',
                        agg='false',
                        cm='miroc3.2(medres)',
                        scenario='sres-a1b',
                        archive='usgs-cida-maurer',
                        variable='pr',
                        run=2,
                )
        response = self.client.get(url)
        if response.status_code != 200:
            print response.content
        self.assertEqual(response.status_code, 200)
    
    def test_simple_kml_data_request(self):
        '''tests that a simple KML data request works'''
    
        url = ('/api'
               '/archive/{archive}'
               '/model/{cm}'
               '/scenario/{scenario}'
               '/run/{run}'
               '/temporal/{drange}'
               '/spatial/{sop}+polygon(({polygon}))'
               '/aggregate/{agg}'
               '/variable/{variable}.{ext}'
               ).format(
                    ext='kml',
                    drange='2000-01-01+2000-03-01',
                    polygon='-94+39.75,-93.75+39.75,-93.75+40,-94+39.75',
                    sop='intersects',
                    agg='false',
                    cm='miroc3.2(medres)',
                    scenario='sres-a1b',
                    archive='usgs-cida-maurer',
                    variable='pr',
                    run=2,
                )
        response = self.client.get(url)
        if response.status_code != 200:
            print response.content
        self.assertEqual(response.status_code, 200)

    def test_simple_kmz_data_request(self):
        '''tests that a simple KMZ data request works'''
        
        url = ('/api'
               '/archive/{archive}'
               '/model/{cm}'
               '/scenario/{scenario}'
               '/run/{run}'
               '/temporal/{drange}'
               '/spatial/{sop}+polygon(({polygon}))'
               '/aggregate/{agg}'
               '/variable/{variable}.{ext}'
               ).format(
                    ext='kmz',
                    drange='2000-01-01+2000-02-01',
                    polygon='-104+39.75,-103.75+39.75,-103.75+40,-104+39.75',
                    sop='intersects',
                    agg='false',
                    cm='miroc3.2(medres)',
                    scenario='sres-a1b',
                    archive='usgs-cida-maurer',
                    variable='pr',
                    run=2,
                )
        response = self.client.get(url)
        if response.status_code != 200:
            print response.content
        self.assertEqual(response.status_code, 200)
    
    
    def test_simple_kmz_data_request_detroit(self):
        '''tests that a KMZ data request for the detroit area works'''
        
        poly = 'POLYGON ((-83.142128872393371 42.22762950293189,-83.142128872393371 42.22762950293189,-83.142128872393371 42.22762950293189,-83.17525346549246 42.146264960288335,-83.183237474281555 42.10817942968923,-83.206207648435296 42.098877671876693,-83.298992682615363 42.090066840170934,-83.311834276039889 42.127997341473161,-83.311679246743012 42.178976141929098,-83.537324388345468 42.207346503257341,-83.781598883789158 42.217061672528203,-83.811958787760631 42.256542466799203,-83.819684414388263 42.31865753841403,-83.721783413411316 42.330181382815113,-83.629179246744286 42.280572007814925,-83.565022956053923 42.279900214195123,-83.514896816730811 42.293258571942573,-83.536626756509534 42.417592068036825,-83.578381313801373 42.521849270185683,-83.510788540363592 42.634555569014253,-83.48949785025934 42.76317820898872,-83.414722052732998 42.774960435551279,-83.349790615558263 42.750465806644925,-83.301369798500787 42.784572251957556,-83.273593716143893 42.839349270186943,-83.25641130240686 42.837488918624445,-83.24819474967245 42.826662706059295,-83.221271328448381 42.790075791996642,-83.210083380857185 42.737753404301131,-83.056139289059701 42.732947496097978,-82.943381313798824 42.686955471358218,-82.887648281572041 42.689048366866032,-82.828091193355661 42.698866889001494,-82.808299119787875 42.684009914717578,-82.790083177404995 42.665148016931042,-82.787835252600289 42.663830267907599,-82.804423387365972 42.63892222754292,-82.783804490881522 42.612722276370931,-82.796000128902406 42.589131985029695,-82.840958624996333 42.568099677086906,-82.870104132808947 42.519007066409628,-82.883384975907973 42.441854152997863,-82.902014329749193 42.394001776695589,-82.925992194332622 42.375501613935086,-83.016503465491837 42.347131252606857,-83.063373989580555 42.32266246191665,-83.104818488278639 42.286437282880044,-83.142128872393371 42.22762950293189))'
        url = ('/api'
               '/archive/{archive}'
               '/model/{cm}'
               '/scenario/{scenario}'
               '/run/{run}'
               '/temporal/{drange}'
               '/spatial/{sop}+{polygon}'
               '/aggregate/{agg}'
               '/variable/{variable}.{ext}'
               ).format(
                    ext='shz',
                    drange='2000-01-01+2000-02-01',
                    polygon=reverse_wkt(poly),
                    sop='clip',
                    agg='false',
                    cm='miroc3.2(medres)',
                    scenario='sres-a1b',
                    archive='usgs-cida-maurer',
                    variable='pr',
                    run=2,
                )
        response = self.client.get(url)
        if response.status_code != 200:
            print response.content
        self.assertEqual(response.status_code, 200)
    
    
    def test_clip_of_nonaggregated_geometries(self):
        '''tests that clipped geometries differ from intersected geometries
        for non-aggregated geometries
        '''
        from lxml import etree
        
        url_template = (
            '/api'
            '/archive/usgs-cida-maurer'
            '/model/miroc3.2(medres)'
            '/scenario/sres-a1b'
            '/run/2'
            '/temporal/2000-01-01+2000-02-01'
            '/spatial/{operation}+polygon((-104+39,+-103+39,+-103+40,+-104+39))'
            '/aggregate/false'
            '/variable/pr.kml'
        )
        url_clip = url_template.format(operation='clip')
        response_clip = self.client.get(url_clip)
        doc_clip = etree.fromstring(response_clip.content)
        folder_kml_string_clip = etree.tostring(
            doc_clip.find('.//{http://www.opengis.net/kml/2.2}Folder')
        )
        
        url_intersects = url_template.format(operation='intersects')
        response_intersects = self.client.get(url_intersects)
        doc_intersects = etree.fromstring(response_intersects.content)
        folder_kml_string_intersects = etree.tostring(
            doc_intersects.find('.//{http://www.opengis.net/kml/2.2}Folder')
        )
        self.assertNotEqual(
            folder_kml_string_clip,
            folder_kml_string_intersects
        )
    
    def test_query_form(self):
        '''Creates a query form'''
        response = self.client.get(
            '/api'
            '/archive/usgs-cida-maurer'
            '/model/ccsm3'
            '/scenario/sres-b1'
            '/variable/tas'
            '/run/2'
            '/query.html'
        )
        if response.status_code != 200:
                print response.content
        self.assertEqual(response.status_code, 200)
    
#    def OLD_test_urls(self):
#
#        ## list of extensions to test
#        exts = [
#                'shz',
#                'geojson',
#                'json',
#                'html'
#                ]
#        ## date ranges to test
#        dranges = [
#                   '2011-2-15',
#                   '2011-01-16+2011-3-16',
#                   ]
#        ## polygons intersections to test
#        polygons = [
##                    '11.5+3.5,12.5+3.5,12.5+2.5,11.5+2.5',
##                    '10.481+5.211,10.353+0.698,13.421+1.533,13.159+4.198',
#                    '18.746123371481431+80.295526668209391,18.261118856852192+82.963051498670211,0.073449558255717+86.358083101074868,36.206285898134041+86.843087615704121,66.5190680624615+81.023033440153256,106.531940519373734+64.532879942759109,181.707640286905814+82.478046984040958,205.715363761053169+65.017884457388362,280.163556756641356+78.598010867007048,288.651135762653098+47.557721930735738,293.986185423574739+70.110431860995362,294.956194452833188+49.982744503881918,302.23126217227184+74.717974749973138,300.291244113754829+43.192681299072575,355.824261038802774+86.358083101074868,356.551767810746583+-86.061021849619692,225.35804660353736+-83.150994761844245,145.089799432398252+-19.857905602728522,106.774442776688346+-54.778230656033756,93.436818624384273+-38.045574901324997,59.001498085708292+-80.483469931383439,22.626159488515341+-77.33094058629338,10.258544365469746+-69.328366094910933,22.868661745829968+-31.25551169651564,24.808679804346923+8.272356245767355,10.986051137413604+33.4925910064878,18.746123371481431+80.295526668209391',
#                    '71.009248245704413+28.048816528798497,84.841541328399558+26.255741499560216,87.40307708445421+14.984984172919738,82.792312723555824+7.300376904755765,73.826937577364532+5.763455451122965,64.09310170435684+9.093451933994018,63.836948128751374+20.364209260634524',
#                    ]
#        ## spatial operations
#        sops = [
#                'intersects',
#                'clip'
#                ]
#        ## aggregation
#        aggs = [
#                'true',
#                'false'
#                ]
#        ## climate models
#        cms = [
#               'bccr-bcm2.0'
#               ]
#        ## scenarios
#        scenarios = [
#                     '1pctto2x',
#                     ]
#        ## archives
#        archives = [
#                    'cmip3',
#                    ]
#        ## variables
#        variables = [
#                     'ps',
#                     ]
#        
#        base_url = ('/api/archive/{archive}/model/{cm}/scenario/{scenario}/'
#                    'temporal/{drange}/spatial/{sop}+polygon'
#                    '(({polygon}))/aggregate/{agg}/'
#                    'variable/{variable}.{ext}')
#        
##        for ext,drange,polygon,sop,agg,cm,scenario,archive,variable in itertools.product(exts,dranges,polygons,sops,aggs,cms,scenarios,archives,variables):
##            print ext,drange,'polygon index: '+str(polygons.index(polygon)),sop,agg,cm,scenario,archive,variable,'\n'
##            url = base_url.format(ext=ext,drange=drange,polygon=polygon,sop=sop,agg=agg,cm=cm,scenario=scenario,archive=archive,variable=variable)
##            response = self.client.get(url)
##            self.assertTrue(response.content != None)
##            self.assertEqual(response.status_code,200)
#
#        dranges = [
##                   '1950-5-15',
#                   '1950-9-1+1951-11-30'
#                   ]
#        polygons = [
#                    '-105.810709477731606+41.745763941079858,-104.480587924505272+41.72442509263238,-104.480587924505272+41.72442509263238,-103.634146936088499+41.639069698842455,-102.816157745601714+42.179653859511987,-101.279760657383051+42.641995575874084,-100.703611749301047+42.421494141916774,-100.390641972071322+41.994717172967142,-100.710724698783537+41.361664669025195,-101.407793748067931+40.586353175433366,-103.207369967138874+39.988865418903892,-103.925777864870753+39.66878269219167,-105.206108771719627+39.298909319101988,-106.60735981977092+39.462507157199347,-106.806522405280745+40.337399943546089,-106.642924567183385+41.240744527822798,-105.810709477731606+41.745763941079858',
#                    ]
#        archives = [
#                    'maurer07'
#                    ]
#        cms = [
#               'bccr-bcm2.0',
#               'cccma-cgcm3.1'
#               ]
#        scenarios = [
#                     'sresa1b',
#                     'sresa2'
#                     ]
#        variables = [
#                     'Prcp',
#                     ]
#        
#        for ext,drange,polygon,sop,agg,cm,scenario,archive,variable in itertools.product(exts,dranges,polygons,sops,aggs,cms,scenarios,archives,variables):
#            print ext,drange,'polygon index: '+str(polygons.index(polygon)),sop,agg,cm,scenario,archive,variable,'\n'
#            url = base_url.format(ext=ext,drange=drange,polygon=polygon,sop=sop,agg=agg,cm=cm,scenario=scenario,archive=archive,variable=variable)
#            response = self.client.get(url)
#            self.assertTrue(response.content != None)
#            self.assertEqual(response.status_code,200)
        
        
#class OpenClimateShpTests(NetCdfAccessTest):
#    
#    def get_object(self):
#        """Return an example OpenClimateShp object."""
#        
#        qs = SpatialGridCell.objects.all().order_by('row','col')
#        geom_list = qs.values_list('geom',flat=True)
##        geom_list = obj.geom) for obj in qs]
#        na = NetCdfAccessor(self.rootgrp,self.var)
#        dl = na.get_dict(geom_list)
#        path = get_temp_path('.shp')
#        shp = OpenClimateShp(path,dl)
#        return(shp)
#    
#    def test_write(self):
#        """Write a shapefile."""
#        
#        shp = self.get_object()
#        shp.write()
        
        
#class TestHelpers(TestCase):
#    
#    def test_parse_polygon_wkt(self):
#        """Test the parsing of the polygon query string."""
#        
#        actual = 'POLYGON ((30 10,10 20,20 40,40 40,30 10))'
#        
#        qs = ['POLYGON((30+10,10+20,20+40,40+40))',
#              'polygon((30+10,10+20,20+40,40+40))',
#              'polygon((30 10,10 20,20 40,40 40))']
#        
#        for q in qs: 
#            wkt = parse_polygon_wkt(q)
#            self.assertEqual(wkt,actual)


class TestFileUpload(TestCase):
    """Test URLs for uploading files."""

    def test_upload_shapefile(self):
        '''Tests uploading a shapefile'''
        with open('src/openclimategis/api/testdata/ne_ia_mi.zip') as f:
            response = self.client.post(
                '/api/shpupload.html',
                {'code': 'TESTCODE', 
                 'uid_field': "objectid",
                 'filefld': f},
            )
        self.assertEqual(response.status_code, 302)
    
    def test_upload_shapefile_bad_code(self):
        '''Tests uploading a shapefile'''
        with open('src/openclimategis/api/testdata/ne_ia_mi.zip') as f:
            response = self.client.post(
                '/api/shpupload.html',
                {'code': 'argh!^^#$', 
                 'uid_field': "objectid",
                 'filefld': f},
            )
        self.assertTrue('The AOI code provided is invalid' in response.content)

    def test_upload_kml(self):
        '''Tests uploading a KML file'''
        with open('src/openclimategis/api/testdata/testfile.kml') as f:
            response = self.client.post(
                '/api/shpupload.html',
                {'code': 'TESTCODE', 
                 #'objectid': None,
                 'filefld': f},
            )
        self.assertEqual(response.status_code, 302)


if __name__ == '__main__':
    unittest.main()
